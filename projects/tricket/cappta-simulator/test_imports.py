#!/usr/bin/env python3
"""
Teste simples para verificar se todos os imports est√£o funcionando
"""

import sys
import traceback

def test_import(module_name, description):
    """Testa importa√ß√£o de um m√≥dulo"""
    try:
        __import__(module_name)
        print(f"‚úÖ {description}: {module_name}")
        return True
    except ImportError as e:
        print(f"‚ùå {description}: {module_name} - {e}")
        return False
    except Exception as e:
        print(f"üî∂ {description}: {module_name} - Erro: {e}")
        traceback.print_exc()
        return False

def main():
    print("=== Teste de Importa√ß√µes - Cappta Fake Simulator ===\n")
    
    success_count = 0
    total_tests = 0
    
    # Testa depend√™ncias externas
    external_deps = [
        ("fastapi", "FastAPI Framework"),
        ("uvicorn", "ASGI Server"),
        ("pydantic", "Data Validation"),
        ("pydantic_settings", "Settings Management"),
        ("sqlalchemy", "Database ORM"),
        ("httpx", "HTTP Client"),
        ("psutil", "System Utils")
    ]
    
    print("üì¶ Depend√™ncias Externas:")
    for module, desc in external_deps:
        total_tests += 1
        if test_import(module, desc):
            success_count += 1
    
    print("\nüìÅ M√≥dulos Internos:")
    # Testa m√≥dulos internos
    internal_modules = [
        ("config.settings", "Configura√ß√µes"),
        ("app.models.common", "Modelos Comuns"),
        ("app.models.merchant", "Modelos de Comerciante"),
        ("app.models.transaction", "Modelos de Transa√ß√£o"),
        ("app.database.models", "Modelos de Banco"),
        ("app.database.connection", "Conex√£o com Banco"),
        ("app.api.auth", "Autentica√ß√£o"),
        ("app.api.health", "Health Check"),
        ("app.api.merchants", "API de Comerciantes"),
        ("app.api.transactions", "API de Transa√ß√µes"),
        ("app.services.asaas_client", "Cliente Asaas"),
        ("app.services.transaction_processor", "Processador de Transa√ß√µes")
    ]
    
    for module, desc in internal_modules:
        total_tests += 1
        if test_import(module, desc):
            success_count += 1
    
    print(f"\n=== Resultado: {success_count}/{total_tests} m√≥dulos importados com sucesso ===")
    
    if success_count == total_tests:
        print("üéâ Todos os imports est√£o funcionando!")
        return True
    else:
        print(f"‚ö†Ô∏è  {total_tests - success_count} m√≥dulos com problemas")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)