#!/usr/bin/env bash
set -euo pipefail

# Run relational sample migrations in safe order for debugging
#
# Usage:
#   scripts/run_relational_sample.sh [--list-only] [--verbose]
#
# Connection options (one of):
#   - DATABASE_URL: full Postgres URL, e.g. postgres://user:pass@host:5432/db
#   - PSQL envs: PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD (psql defaults)
#
# Notes:
# - This script does NOT drop or reset anything.
# - It requires that schema/tables are already created by your base migrations (100..600 etc.).
# - It executes, in order:
#     1) 700_temp_migration_support_tables.sql
#     2) 70x sample files (only INSERTs ideally)
# - Wraps everything in a single transaction with constraints deferred.
# - Aborts on first error (ON_ERROR_STOP).

LIST_ONLY=false
VERBOSE=false
for arg in "$@"; do
  case "$arg" in
    --list-only) LIST_ONLY=true ;;
    --verbose) VERBOSE=true ;;
    *) echo "Unknown arg: $arg"; exit 2 ;;
  esac
done

# Resolve repo root (script location two levels up from here)
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
MIG_DIR="$REPO_ROOT/supabase/migrations"

# Required files
SUPPORT="$MIG_DIR/700_temp_migration_support_tables.sql"
# Preferred master (if present)
MASTER="$MIG_DIR/716_relational_sample_master.sql"

# Ordered samples (fallback if MASTER not present)
ORDERED_SAMPLES=(
  # Lookups first
  709_sample_tm_situations.sql
  710_sample_tm_media.sql
  713_sample_finance_account_plan.sql
  714_sample_finance_cost_centers.sql
  # Core base entities
  701_sample_core_people_employees.sql
  702_sample_core_donors_part1.sql
  703_sample_core_donors_part2.sql
  704_sample_core_donors_part3.sql
  # Dependents
  706_sample_items_catalog.sql
  705_sample_donations.sql
  707_sample_donated_items.sql
  # Telemarketing base then dependents
  708_sample_tm_operators.sql
  711_sample_tm_profiles.sql
  712_sample_tm_logs.sql
  # Finance accounts
  715_sample_finance_accounts.sql
)

# Check tools
if ! command -v psql >/dev/null 2>&1; then
  echo "ERROR: psql not found. Please install PostgreSQL client." >&2
  exit 1
fi

# Build psql base command
PSQL_BASE=(psql -v ON_ERROR_STOP=1)
if [[ -n "${DATABASE_URL:-}" ]]; then
  PSQL_BASE+=("$DATABASE_URL")
else
  # fall back to PG* envs
  : # psql will pick up PGHOST/PGPORT/PGDATABASE/PGUSER/PGPASSWORD if set
fi

# Validate required files
if [[ ! -f "$SUPPORT" ]]; then
  echo "ERROR: Missing $SUPPORT. Ensure base support migration exists." >&2
  exit 1
fi

MISSING=()
for f in "${ORDERED_SAMPLES[@]}"; do
  [[ -f "$MIG_DIR/$f" ]] || MISSING+=("$f")
done

echo "# Relational sample execution plan"
echo "- Support: $(basename "$SUPPORT")"
if [[ -f "$MASTER" ]]; then
  echo "- Master:  $(basename "$MASTER") (preferred)"
else
  echo "- Master:  not found (will include ordered sample files)"
fi

echo "- Samples in order:"
for f in "${ORDERED_SAMPLES[@]}"; do
  printf "  - %s %s\n" "$f" "$( [[ -f "$MIG_DIR/$f" ]] && echo "(ok)" || echo "(missing)" )"
done

if (( ${#MISSING[@]} > 0 )); then
  echo "\nWARNING: The following sample files are missing:" >&2
  for f in "${MISSING[@]}"; do echo "  - $f" >&2; done
fi

$LIST_ONLY && exit 0

# Create a temp SQL to ensure single transaction and consistent settings
TMP_SQL="$(mktemp /tmp/relational_sample_XXXX.sql)"
trap 'rm -f "$TMP_SQL"' EXIT

{
  echo "-- Auto-generated by scripts/run_relational_sample.sh"
  echo "BEGIN;"
  echo "SET CONSTRAINTS ALL DEFERRED;"

  # First run the support mapping table (id mapping etc.)
  echo "\\i $SUPPORT"

  if [[ -f "$MASTER" ]]; then
    echo "-- Using master sample file"
    echo "\\i $MASTER"
  else
    echo "-- Including individual sample files in order"
    for f in "${ORDERED_SAMPLES[@]}"; do
      [[ -f "$MIG_DIR/$f" ]] || continue
      echo "-- include: $f"
      echo "\\i $MIG_DIR/$f"
    done
  fi

  echo "COMMIT;"
} > "$TMP_SQL"

$VERBOSE && { echo "\n# Generated SQL to execute:"; sed -n '1,120p' "$TMP_SQL"; echo "..."; }

# Execute
"${PSQL_BASE[@]}" -f "$TMP_SQL"

echo "\nSUCCESS: Relational sample executed."
