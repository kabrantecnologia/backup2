#!/bin/bash

# Script para gerenciar autentica√ß√£o do bolt.diy
# Gerenciamento de usu√°rios HTTP Basic Auth

echo "========================================"
echo "    üîí bolt.diy User Management Script    "
echo "========================================"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Diret√≥rios
TRAEFIK_DIR="/home/joaohenrique/workspaces/services/traefik"
AUTH_FILE="$TRAEFIK_DIR/auth/bolt-auth"
PROVIDER_FILE="$TRAEFIK_DIR/providers/bolt-diy.yml"

# Verificar se htpasswd est√° instalado
if ! command -v htpasswd &> /dev/null; then
    print_error "htpasswd n√£o est√° instalado!"
    print_info "Execute: sudo apt install apache2-utils"
    exit 1
fi

# Verificar se o diret√≥rio auth existe
if [ ! -d "$TRAEFIK_DIR/auth" ]; then
    print_info "Criando diret√≥rio auth..."
    mkdir -p "$TRAEFIK_DIR/auth"
fi

# Menu de op√ß√µes
show_menu() {
    echo
    print_info "Escolha uma op√ß√£o:"
    echo "1) üë§ Adicionar usu√°rio"
    echo "2) üóëÔ∏è  Remover usu√°rio"
    echo "3) üìã Listar usu√°rios"
    echo "4) üîÑ Alterar senha"
    echo "5) üîí Ver credenciais atuais"
    echo "6) üöÄ Reiniciar bolt.diy"
    echo "7) ‚ùå Sair"
    echo
}

# Adicionar usu√°rio
add_user() {
    echo
    read -p "Nome de usu√°rio: " username
    if [ -z "$username" ]; then
        print_error "Nome de usu√°rio n√£o pode estar vazio!"
        return
    fi
    
    read -s -p "Senha: " password
    echo
    if [ -z "$password" ]; then
        print_error "Senha n√£o pode estar vazia!"
        return
    fi
    
    read -s -p "Confirmar senha: " password2
    echo
    
    if [ "$password" != "$password2" ]; then
        print_error "Senhas n√£o coincidem!"
        return
    fi
    
    # Verificar se usu√°rio j√° existe
    if [ -f "$AUTH_FILE" ] && grep -q "^$username:" "$AUTH_FILE"; then
        print_warning "Usu√°rio j√° existe! Use a op√ß√£o 4 para alterar a senha."
        return
    fi
    
    # Adicionar usu√°rio
    htpasswd -b "$AUTH_FILE" "$username" "$password"
    print_success "Usu√°rio '$username' adicionado com sucesso!"
    
    update_provider
    restart_service
}

# Remover usu√°rio
remove_user() {
    if [ ! -f "$AUTH_FILE" ]; then
        print_error "Arquivo de autentica√ß√£o n√£o existe!"
        return
    fi
    
    echo
    print_info "Usu√°rios atuais:"
    cut -d: -f1 "$AUTH_FILE" | nl
    
    echo
    read -p "Nome de usu√°rio para remover: " username
    if [ -z "$username" ]; then
        print_error "Nome de usu√°rio n√£o pode estar vazio!"
        return
    fi
    
    if ! grep -q "^$username:" "$AUTH_FILE"; then
        print_error "Usu√°rio n√£o encontrado!"
        return
    fi
    
    # Confirmar remo√ß√£o
    read -p "Tem certeza que deseja remover '$username'? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Opera√ß√£o cancelada."
        return
    fi
    
    # Remover usu√°rio
    htpasswd -D "$AUTH_FILE" "$username"
    print_success "Usu√°rio '$username' removido com sucesso!"
    
    update_provider
    restart_service
}

# Listar usu√°rios
list_users() {
    if [ ! -f "$AUTH_FILE" ]; then
        print_warning "Nenhum arquivo de autentica√ß√£o encontrado!"
        return
    fi
    
    echo
    print_info "Usu√°rios cadastrados:"
    cut -d: -f1 "$AUTH_FILE" | nl
}

# Alterar senha
change_password() {
    if [ ! -f "$AUTH_FILE" ]; then
        print_error "Arquivo de autentica√ß√£o n√£o existe!"
        return
    fi
    
    echo
    print_info "Usu√°rios atuais:"
    cut -d: -f1 "$AUTH_FILE" | nl
    
    echo
    read -p "Nome de usu√°rio: " username
    if [ -z "$username" ]; then
        print_error "Nome de usu√°rio n√£o pode estar vazio!"
        return
    fi
    
    if ! grep -q "^$username:" "$AUTH_FILE"; then
        print_error "Usu√°rio n√£o encontrado!"
        return
    fi
    
    read -s -p "Nova senha: " password
    echo
    if [ -z "$password" ]; then
        print_error "Senha n√£o pode estar vazia!"
        return
    fi
    
    read -s -p "Confirmar nova senha: " password2
    echo
    
    if [ "$password" != "$password2" ]; then
        print_error "Senhas n√£o coincidem!"
        return
    fi
    
    # Alterar senha
    htpasswd -b "$AUTH_FILE" "$username" "$password"
    print_success "Senha do usu√°rio '$username' alterada com sucesso!"
    
    update_provider
    restart_service
}

# Ver credenciais atuais
show_credentials() {
    echo
    print_info "Credenciais de acesso atuais:"
    echo "  üåê URL: https://bolt.kabran.com.br"
    
    if [ -f "$AUTH_FILE" ]; then
        echo "  üë§ Usu√°rios:"
        cut -d: -f1 "$AUTH_FILE" | sed 's/^/    - /'
        echo "  üîí Senha: (definida pelo usu√°rio)"
    else
        print_warning "Nenhuma autentica√ß√£o configurada!"
    fi
}

# Atualizar arquivo provider com usu√°rios
update_provider() {
    if [ ! -f "$AUTH_FILE" ]; then
        print_error "Arquivo de autentica√ß√£o n√£o existe!"
        return
    fi
    
    print_info "Atualizando arquivo provider..."
    
    # Criar lista de usu√°rios formatada para YAML
    users_yaml=""
    while IFS= read -r line; do
        if [ ! -z "$line" ]; then
            users_yaml="$users_yaml          - \"$line\"\n"
        fi
    done < "$AUTH_FILE"
    
    # Atualizar arquivo provider
    cat > "$PROVIDER_FILE" << EOF
http:
  routers:
    # Roteador para o bolt.diy com autentica√ß√£o b√°sica
    bolt-diy:
      rule: "Host(\`bolt.kabran.com.br\`)"
      entrypoints:
        - websecure
      service: bolt-diy-service
      tls:
        certresolver: cloudflare
      middlewares:
        - bolt-auth-inline

  middlewares:
    # Middleware de autentica√ß√£o b√°sica inline para o bolt.diy
    bolt-auth-inline:
      basicAuth:
        users:
$(printf "$users_yaml")
  
  services:
    # Servi√ßo para o bolt.diy
    bolt-diy-service:
      loadBalancer:
        servers:
          - url: "http://bolt-diy:5173"
EOF
    
    print_success "Arquivo provider atualizado!"
}

# Reiniciar servi√ßo
restart_service() {
    print_info "Reiniciando bolt.diy para aplicar mudan√ßas..."
    cd /home/joaohenrique/workspaces/bolt.diy
    docker compose --profile development restart > /dev/null 2>&1
    print_success "Servi√ßo reiniciado!"
}

# Fun√ß√£o principal
main() {
    # Verificar se est√° no diret√≥rio correto
    if [ ! -d "$TRAEFIK_DIR" ]; then
        print_error "Diret√≥rio do Traefik n√£o encontrado!"
        print_info "Esperado: $TRAEFIK_DIR"
        exit 1
    fi
    
    while true; do
        show_menu
        read -p "Digite sua op√ß√£o (1-7): " choice
        
        case $choice in
            1) add_user ;;
            2) remove_user ;;
            3) list_users ;;
            4) change_password ;;
            5) show_credentials ;;
            6) restart_service ;;
            7) 
                print_info "Saindo..."
                exit 0
                ;;
            *)
                print_error "Op√ß√£o inv√°lida. Digite um n√∫mero de 1 a 7."
                ;;
        esac
        
        echo
        read -p "Pressione Enter para continuar..."
    done
}

# Executar fun√ß√£o principal
main
